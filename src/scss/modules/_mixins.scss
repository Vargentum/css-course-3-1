@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}
@mixin columnize($count){
  .csscolumns &{@include column-count(#{$count});}
}
@mixin text($text-size, $text-color, $text-weight: normal){
  font-size: $text-size;
  color: $text-color;
  font-weight: $text-weight;
}
@mixin img-container($width:auto, $height:auto){
  width:  $width;
  height: $height;
  img{max-width: 100%;}
}
@mixin placeholder-color($color){
  ::-webkit-input-placeholder {color: $color;}
  :-moz-placeholder           {color: $color;}
  ::-moz-placeholder          {color: $color;}
  :-ms-input-placeholder      {color: $color;}
}
@mixin centering-absolute($width, $height){
  width: $width;
  height: $height;
  position: absolute;
  left:50%;
  top:50%;
  margin-top: -$height /2;
  margin-left: -$width /2;
}
//Link Mixin Colors
@mixin singleLink($lmc-1: $linkColor){@include link-colors($lmc-1,$lmc-1,$lmc-1,$lmc-1,$lmc-1);}
@mixin simpleLink($lmc-1: $linkColor, $lmc-2: $hoverLinkColor){@include link-colors($lmc-1,$lmc-2,$lmc-1, $lmc-1, $lmc-2);}
@mixin singleLink-custom($lmc-1: $linkColor, $decorationType: dotted){
  @include singleLink($lmc-1);
  text-decoration: none;
  border-bottom: 1px $decorationType $lmc-1;
}
@mixin simpleLink-custom($lmc-1: $linkColor, $lmc-2: $hoverLinkColor, $decorationType: dotted){
  @include simpleLink($lmc-1,$lmc-2);
  text-decoration: none;
  border-bottom: 1px $decorationType $lmc-1;
  &:hover,&:focus{border-bottom-color: $lmc-2;}
}

//vendorize
@mixin vendorize($prop, $val){
  -webkit-#{$prop}: $val;
  -moz-#{$prop}: $val;
  -ms-#{$prop}: $val;
  #{$prop}: $val;
}

//for responsive
@mixin respond-to($media) {
  @if $media == ie10{
    @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {@content;}
  }
  @else if $media == iphone{
    @media only screen and (min-device-width : 320px) and (max-device-width : 480px) {@content;}
  }
  @else if $media == ipad{
    @media only screen and (min-device-width : 768px) and (max-device-width : 1024px) {@content;}
  }
}
@mixin breakpoint($val){
  @media only screen and (max-width: $val) {@content;}
}
@mixin fluid-width($width, $parentWidth){
  width: $width / $parentWidth * 100%;
}
@mixin fluid-prop($prop, $width, $parentWidth){
  #{$prop}: $width / $parentWidth * 100%;
}

//position
@mixin position ($position: relative, $coordinates: 0 0 0 0) {
  @if type-of($position) == list {
    $coordinates:$position;
    $position:relative;
  }

  $top:nth($coordinates, 1);
  $right:nth($coordinates, 2);
  $bottom:nth($coordinates, 3);
  $left:nth($coordinates, 4);

  position: $position;

  @if $top == auto {
    top:$top;
  }
  @else if not(unitless($top)) {
    top:$top;
  }
  @if $right == auto {
    right:$right;
  }
  @else if not(unitless($right)) {
    right:$right;
  }
  @if $bottom == auto {
    bottom:$bottom;
  }
  @else if not(unitless($bottom)) {
    bottom:$bottom;
  }
  @if $left == auto {
    left:$left;
  }
  @else if not(unitless($left)) {
    left:$left;
  }
}
